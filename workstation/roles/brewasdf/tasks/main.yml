---
- name: Install dependencies of Linuxbrew
  vars:
    lb_dep_pkgs:
    - build-essential
    - gcc
    - curl
    - git
    - m4
    - ruby
    - texinfo
    - libbz2-dev
    - libcurl4-openssl-dev
    - libexpat-dev
    - libncurses-dev
    - zlib1g-dev
  apt:
    name: "{{ lb_dep_pkgs }}"
    state: present
  when: ansible_distribution == 'Ubuntu'

- name: Install dependencies of Linuxbrew
  vars:
    lb_dep_pkgs:
    - '@Development Tools'
    - curl
    - file
    - git
  dnf:
    name: "{{ lb_dep_pkgs }}"
    state: present
  when: ansible_distribution == 'Fedora'

- name: Ensure /home/linuxbrew exists
  file:
    path: /home/linuxbrew
    state: directory
    owner: "{{ ansible_effective_user_id }}"
    group: "{{ ansible_effective_group_id }}"

- name: Install Linuxbrew
  git:
    repo: https://github.com/Homebrew/brew
    dest: /home/linuxbrew/.linuxbrew
  become: no

- name: Install brew packages
  vars:
    lb_pkgs:
    - go
    - rustup
    - fzf
    - ag
    - kubernetes-cli
    - kubectx
    - kubernetes-helm
    - stern
    - awscli
    - vault
    - terraform
      #    - gpg2
    - direnv
    - starship
      #- scala@2.12
      #- sbt
    - hub
    - derailed/k9s/k9s
  homebrew:
    name: "{{ lb_pkgs }}"
    state: present
  environment:
    PATH: "/home/linuxbrew/.linuxbrew/bin:{{ ansible_env.PATH }}"
    LD_LIBRARY_PATH: "/home/linuxbrew/.linuxbrew/lib:{{ ansible_env.LD_LIBRARY_PATH | default('') }}"
  become: no

- name: fzf post install
  shell: "/home/linuxbrew/.linuxbrew/opt/fzf/install --all"
  environment:
    PATH: "/home/linuxbrew/.linuxbrew/bin:{{ ansible_env.PATH }}"
    LD_LIBRARY_PATH: "/home/linuxbrew/.linuxbrew/lib:{{ ansible_env.LD_LIBRARY_PATH | default('') }}"
  become: no

- name: rust post install
  shell: "rustup-init -y -q --profile complete"
  environment:
    PATH: "/home/linuxbrew/.linuxbrew/bin:{{ ansible_env.PATH }}"
    LD_LIBRARY_PATH: "/home/linuxbrew/.linuxbrew/lib:{{ ansible_env.LD_LIBRARY_PATH | default('') }}"
  become: no

# - name: install asdf
#   git:
#     repo: 'https://github.com/asdf-vm/asdf.git'
#     dest: '{{ ansible_env.HOME }}/.asdf'
#     version: v0.7.2
#   become: no

# - name: install asdf plugins
#   shell: "source {{ansible_env.HOME}}/.asdf/asdf.sh && asdf plugin-add {{ item }}"
#   args:
#     executable: /bin/bash
#   register: result
#   failed_when:
#     - result.rc != 0
#     - result.rc != 2
#   loop:
#     - rust
#     - python
#     - golang
#     - java
#     - adr-tools
#     - sbt
#     - scala
#   become: no

# - name: install asdf default envs
#   shell: "source {{ansible_env.HOME}}/.asdf/asdf.sh && asdf install {{ item.plugin }} {{ item.version }} && asdf global {{ item.plugin }} {{ item.version }}"
#   args:
#     executable: /bin/bash
#   loop:
#     - plugin: rust
#       version: stable
#     - plugin: python
#       version: miniconda3-latest
#     - plugin: golang
#       version: "1.13.6"
#     - plugin: java
#       version: amazon-corretto-11.0.3.7.1
#     - plugin: adr-tools
#       version: 3.0.0
#     - plugin: sbt
#       version: 1.3.7
#     - plugin: scala
#       version: 2.12.10
#   become: no

